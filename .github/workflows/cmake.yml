name: cmake build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  # windows:
  #   name: ${{ matrix.config.name }}
  #   runs-on: windows-latest
  #   env:
  #     vulkan_version: "1.2.154.1"
  #     vulkan_sdk_dir: "${{github.workspace}}/vulkan_sdk/"
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       config:
  #         - {
  #             name: "Windows Release",
  #             artifact: "windows-release.zip",
  #             cmake_build_type: "Release",
  #             cmake_configure_options: '-G "Visual Studio 16 2019" -A x64',
  #             conan_profile_update: 'conan profile update settings.compiler="Visual Studio" default; conan profile update settings.compiler.version=16 default',
  #           }
  #         - {
  #             name: "Windows Debug",
  #             artifact: "windows-debug.zip",
  #             cmake_build_type: "Debug",
  #             cmake_configure_options: '-G "Visual Studio 16 2019" -A x64',
  #             conan_profile_update: 'conan profile update settings.compiler="Visual Studio" default; conan profile update settings.compiler.version=16 default',
  #           }

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Install Vulkan SDK
  #       shell: pwsh
  #       run: |
  #         curl -LS -o vulkansdk.exe `
  #           https://sdk.lunarg.com/sdk/download/${{ env.vulkan_version }}/windows/VulkanSDK-${{ env.vulkan_version }}-Installer.exe?Human=true
  #         7z x vulkansdk.exe -o"${{ env.vulkan_sdk_dir }}"

  #     - name: Update environment
  #       shell: pwsh
  #       run: |
  #         pip3 install wheel setuptools
  #         pip3 install conan

  #     - name: Create Build Directory
  #       run: cmake -E make_directory ${{github.workspace}}/build

  #     - name: Configure CMake
  #       shell: pwsh
  #       working-directory: ${{github.workspace}}/build
  #       run: |
  #         conan profile new default --detect --force
  #         ${{ matrix.config.conan_profile_update }}

  #         cmake .. `
  #           -DCMAKE_BUILD_TYPE=${{ matrix.config.cmake_build_type }} `
  #           -DCMAKE_PREFIX_PATH=${{ env.vulkan_sdk_dir }} `
  #           -DGRIS_ASSERT_COMPILATION_TESTS=ON `
  #           ${{ matrix.config.cmake_configure_options }}

  #     - name: Build
  #       shell: pwsh
  #       working-directory: ${{github.workspace}}/build
  #       run: |
  #         cmake --build . --config ${{ matrix.config.cmake_build_type }}

  #     - name: Test
  #       working-directory: ${{github.workspace}}/build
  #       shell: pwsh
  #       run: |
  #         ctest . -C ${{ matrix.config.cmake_build_type }}

  #     - name: Compress artifacts
  #       shell: pwsh
  #       run: |
  #         7z a -tzip ${{ matrix.config.artifact }} build/bin/*

  #     - name: Archive artifacts
  #       uses: actions/upload-artifact@v1
  #       with:
  #         path: ${{ matrix.config.artifact }}
  #         name: ${{ matrix.config.artifact }}

  linux:
    name: ${{ matrix.config.name }}
    runs-on: ubuntu-latest
    container: ubuntu:20.04
    env:
      DEBIAN_FRONTEND: "noninteractive"
      VULKAN_VERSION: "1.2.154.0"
      VULKAN_SDK_DIR: "$GITHUB_WORKSPACE/vulkan_sdk/"
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Ubuntu Clang Debug",
            artifact: "linux-clang-debug.tar.gz",
            cmake_build_type: "Debug",
            cc: "clang", cxx: "clang++",
            cmake_configure_options: '',
            conan_profile_update: "conan profile update settings.compiler.libcxx=libstdc++11 default",
          }
          # - {
          #   name: "Ubuntu Clang Release",
          #   artifact: "linux-clang-release.tar.gz",
          #   cmake_build_type: "Release",
          #   cc: "clang", cxx: "clang++",
          #   cmake_configure_options: '',
          #   conan_profile_update: "conan profile update settings.compiler.libcxx=libstdc++11 default",
          # }
          # - {
          #   name: "Ubuntu GCC Debug",
          #   artifact: "linux-gcc-debug.tar.gz",
          #   cmake_build_type: "Debug",
          #   cc: "gcc", cxx: "g++",
          #   cmake_configure_options: '',
          #   conan_profile_update: "conan profile update settings.compiler.libcxx=libstdc++11 default",
          # }
          # - {
          #   name: "Ubuntu GCC Release",
          #   artifact: "linux-gcc-release.tar.gz",
          #   cmake_build_type: "Release",
          #   cc: "gcc", cxx: "g++",
          #   cmake_configure_options: '',
          #   conan_profile_update: "conan profile update settings.compiler.libcxx=libstdc++11 default",
          # }

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Update environment
        shell: bash
        run: |
          apt-get update -qq
          apt-get install -y \
            apt-transport-https \
            ca-certificates \
            gnupg \
            software-properties-common \
            wget
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
          apt-add-repository 'deb https://apt.kitware.com/ubuntu/ focal main'
          apt-get update -qq
          apt-get install -y \
            clang \
            curl \
            cmake \
            libgl1-mesa-dev \
            libx11-dev \
            libx11-xcb-dev \
            libxcb-dri3-dev \
            libxcb-icccm4-dev \
            libxcb-image0-dev \
            libxcb-keysyms1-dev \
            libxcb-randr0-dev \
            libxcb-render-util0-dev \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-sync-dev \
            libxcb-util-dev \
            libxcb-xfixes0-dev \
            libxcb-xinerama0-dev \
            libxcb-xkb-dev \
            lld \
            ninja-build \
            pkg-config \
            python3 \
            python3-pip \
            xkb-data \
            xorg-dev
          pip3 install wheel setuptools
          pip3 install conan

      - name: Install Vulkan SDK
        shell: bash
        run: |
          curl -LS -o vulkansdk.tar.gz \
            https://sdk.lunarg.com/sdk/download/${{ env.VULKAN_VERSION }}/linux/vulkansdk-linux-x86_64-${{ env.VULKAN_VERSION }}.tar.gz
          mkdir -p "${{ env.VULKAN_SDK_DIR }}"
          tar xfz vulkansdk.tar.gz -C "${{ env.VULKAN_SDK_DIR }}"
          rm vulkansdk.tar.gz

      - name: Create Build Directory
        run: |
          cmake -E make_directory $GITHUB_WORKSPACE/build

      - name: Configure CMake
        shell: bash
        working-directory: build
        run: |
          source ${{ env.VULKAN_SDK_DIR }}/${{ env.VULKAN_VERSION }}/setup-env.sh

          conan profile new default --detect
          ${{ matrix.config.conan_profile_update }}

          # Configure cmake
          cmake .. \
            -GNinja \
            -DCMAKE_C_COMPILER=${{ matrix.config.cc }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.cmake_build_type }} \
            -DCMAKE_PREFIX_PATH="$VULKAN_SDK_DIR" \
            -DGRIS_ASSERT_COMPILATION_TESTS=ON \
            ${{ matrix.config.cmake_configure_options }}

      - name: Build
        shell: bash
        working-directory: build
        run: |
          cmake --build . --config ${{ matrix.config.cmake_build_type }}

      - name: Prepare upload
        shell: bash
        working-directory: build
        run: |
          tar cfz ${{ matrix.config.artifact }} bin

      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          path: ${{ matrix.config.artifact }}
          name: ${{ matrix.config.artifact }}
